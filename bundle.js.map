{"version":3,"sources":["webpack://watch/./src/const/index.js","webpack://watch/./src/utils/index.js","webpack://watch/./src/index.js","webpack://watch/./src/class/Watch.js"],"names":["digitsAngles","12","1","2","3","4","5","6","7","8","9","10","11","getRadians","degrees","Math","PI","canvas","document","getElementById","width","window","innerWidth","height","innerHeight","radius","constructor","this","init","bind","drawWatch","clearCanvas","drawArrows","ctx","getContext","hoursArrowLength","minutesArrowLength","secondsArrowLength","requestAnimationFrame","beginPath","lineWidth","arc","stroke","fill","font","textAlign","textBaseline","Object","entries","forEach","digit","angle","fillText","cos","sin","i","rad","moveTo","lineTo","closePath","clearRect","now","Date","millisecondsFromTheStartOfTheDay","getFullYear","getMonth","getDate","hours","minutes","floor","seconds","hoursRad","minutesRad","secondsRad"],"mappings":"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","file":"bundle.js","sourcesContent":["export const digitsAngles = {\n  12: -90,\n  1: -60,\n  2: -30,\n  3: 0,\n  4: 30,\n  5: 60,\n  6: 90,\n  7: 120,\n  8: 150,\n  9: 180,\n  10: 210,\n  11: 240,\n};\n","export const getRadians = (degrees) => (Math.PI / 180) * degrees;\n","import { Watch } from \"./class/Watch\";\nimport \"./style.less\";\n\nconst canvas = document.getElementById(\"canvas\");\nconst width = window.innerWidth / 2;\nconst height = window.innerHeight / 1.5;\nconst radius = (height - 10) / 2;\n\nnew Watch(canvas, width, height, radius);\n","import { digitsAngles } from \"../const\";\nimport { getRadians } from \"../utils\";\n\nexport class Watch {\n  constructor(canvas, width, height, radius) {\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n\n    this.init = this.init.bind(this);\n    this.drawWatch = this.drawWatch.bind(this);\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.drawArrows = this.drawArrows.bind(this);\n\n    this.init();\n  }\n\n  init() {\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.hoursArrowLength = this.radius * 0.4;\n    this.minutesArrowLength = this.radius * 0.6;\n    this.secondsArrowLength = this.radius * 0.75;\n    this.drawWatch();\n    requestAnimationFrame(this.drawArrows);\n  }\n\n  drawWatch() {\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 5;\n    this.ctx.arc(\n      this.width / 2,\n      this.height / 2,\n      this.radius,\n      0,\n      getRadians(360)\n    );\n    this.ctx.stroke();\n    this.ctx.beginPath();\n    this.ctx.arc(this.width / 2, this.height / 2, 10, 0, getRadians(360));\n    this.ctx.fill();\n\n    // Draw digits\n    this.ctx.font = \"48px serif\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n\n    Object.entries(digitsAngles).forEach(([digit, angle]) => {\n      this.ctx.fillText(\n        digit,\n        this.width / 2 + Math.cos(getRadians(angle)) * this.radius * 0.89,\n        this.height / 2 + Math.sin(getRadians(angle)) * this.radius * 0.89\n      );\n    });\n\n    // Draw segmentation\n    for (let i = 0; i < 60; i++) {\n      const rad = getRadians(i * 6);\n\n      this.ctx.beginPath();\n      if (i % 5) {\n        this.ctx.moveTo(\n          this.width / 2 + Math.cos(rad) * (this.radius - 10),\n          this.height / 2 + Math.sin(rad) * (this.radius - 10)\n        );\n      } else {\n        this.ctx.moveTo(\n          this.width / 2 + Math.cos(rad) * (this.radius - 15),\n          this.height / 2 + Math.sin(rad) * (this.radius - 15)\n        );\n      }\n      this.ctx.lineTo(\n        this.width / 2 + Math.cos(rad) * this.radius,\n        this.height / 2 + Math.sin(rad) * this.radius\n      );\n      this.ctx.closePath();\n      this.ctx.lineWidth = 3;\n      this.ctx.stroke();\n    }\n  }\n\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  drawArrows() {\n    this.clearCanvas();\n    this.drawWatch();\n\n    const now = new Date();\n    const millisecondsFromTheStartOfTheDay =\n      now - new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n    // Find float time values for smooth movement of the arrows\n    const hours = millisecondsFromTheStartOfTheDay / 3600000;\n    const minutes =\n      (millisecondsFromTheStartOfTheDay - Math.floor(hours) * 3600000) / 60000;\n    const seconds =\n      (millisecondsFromTheStartOfTheDay -\n        Math.floor(hours) * 3600000 -\n        Math.floor(minutes) * 60000) /\n      1000;\n\n    const hoursRad = getRadians(hours * 60 - 90),\n      minutesRad = getRadians(minutes * 6 - 90),\n      secondsRad = getRadians(seconds * 6 - 90);\n\n    // Draw hours arrow\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.width / 2, this.height / 2);\n    this.ctx.lineTo(\n      this.width / 2 + Math.cos(hoursRad) * this.hoursArrowLength,\n      this.height / 2 + Math.sin(hoursRad) * this.hoursArrowLength\n    );\n    this.ctx.closePath();\n    this.ctx.lineWidth = 6;\n    this.ctx.stroke();\n\n    // Draw minutes arrow\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.width / 2, this.height / 2);\n    this.ctx.lineTo(\n      this.width / 2 + Math.cos(minutesRad) * this.minutesArrowLength,\n      this.height / 2 + Math.sin(minutesRad) * this.minutesArrowLength\n    );\n    this.ctx.closePath();\n    this.ctx.lineWidth = 4;\n    this.ctx.stroke();\n\n    // Draw second arrow\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.width / 2, this.height / 2);\n    this.ctx.lineTo(\n      this.width / 2 + Math.cos(secondsRad) * this.secondsArrowLength,\n      this.height / 2 + Math.sin(secondsRad) * this.secondsArrowLength\n    );\n    this.ctx.closePath();\n    this.ctx.lineWidth = 2;\n    this.ctx.stroke();\n\n    requestAnimationFrame(this.drawArrows);\n  }\n}\n"],"sourceRoot":""}